"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[94111],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=i,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},80402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7896),i=(n(2784),n(30876));const r={title:"\ud83d\udcd3 4.4.0.6 Async Actions with Redux Thunk",id:"4406-async-actions-with-redux-thunk",slug:"4406-async-actions-with-redux-thunk",hide_table_of_contents:!0,sidebar_position:6,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0f_creating_an_asynchronous_action_with_redux_thunk.md"},o=void 0,s={unversionedId:"fidgetech-4-react/react-with-apis/4406-async-actions-with-redux-thunk",id:"fidgetech-4-react/react-with-apis/4406-async-actions-with-redux-thunk",title:"\ud83d\udcd3 4.4.0.6 Async Actions with Redux Thunk",description:"In this lesson, we'll update the makeApiCall() method we previously wrote to dispatch actions instead of updating local state.",source:"@site/docs/fidgetech-4-react/react-with-apis/0f-creating-an-asynchronous-action-with-redux-thunk.md",sourceDirName:"fidgetech-4-react/react-with-apis",slug:"/fidgetech-4-react/react-with-apis/4406-async-actions-with-redux-thunk",permalink:"/fidgetech-4-react/react-with-apis/4406-async-actions-with-redux-thunk",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"\ud83d\udcd3 4.4.0.6 Async Actions with Redux Thunk",id:"4406-async-actions-with-redux-thunk",slug:"4406-async-actions-with-redux-thunk",hide_table_of_contents:!0,sidebar_position:6,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0f_creating_an_asynchronous_action_with_redux_thunk.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.4.0.5 Writing Custom Middleware",permalink:"/fidgetech-4-react/react-with-apis/4405-writing-custom-middleware"},next:{title:"\ud83d\udcd3 4.4.0.7 Building an API Application with React and Redux: Part 2",permalink:"/fidgetech-4-react/react-with-apis/4407-building-an-api-application-with-react-and-redux-part-2"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this lesson, we'll update the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeApiCall()")," method we previously wrote to dispatch actions instead of updating local state."),(0,i.kt)("p",null,"In the process, we'll learn how to write asynchronous actions that can be used with Redux Thunk middleware."),(0,i.kt)("p",null,"Here's the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeApiCall()")," method that's currently in our ",(0,i.kt)("inlineCode",{parentName:"p"},"Headlines")," component:"),(0,i.kt)("div",{class:"filename"},"src/components/Headlines.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"    makeApiCall = () => {\n      fetch(`https://api.nytimes.com/svc/topstories/v2/home.json?api-key=${process.env.REACT_APP_API_KEY}`)\n        .then(response => response.json())\n        .then((jsonifiedResponse) => {\n          this.setState({\n            isLoaded: true,\n            headlines: jsonifiedResponse.results\n          });\n        }),\n        .catch((error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        });\n    }\n")),(0,i.kt)("p",null,"We'll be removing this method from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Headlines")," component and then adding a very similar function to ",(0,i.kt)("inlineCode",{parentName:"p"},"actions/index.js"),"."),(0,i.kt)("p",null,"Let's take a look at the new function:"),(0,i.kt)("div",{class:"filename"},"src/actions/index.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export const makeApiCall = () => {\n  return dispatch => {\n    dispatch(requestHeadlines);\n    return fetch(`https://api.nytimes.com/svc/topstories/v2/home.json?api-key=${process.env.REACT_APP_API_KEY}`)\n      .then(response => response.json())\n      .then(\n        (jsonifiedResponse) => {\n        dispatch(getHeadlinesSuccess(jsonifiedResponse.results));\n      })\n      .catch((error) => {\n        dispatch(getHeadlinesFailure(error));\n      });\n  }\n}\n")),(0,i.kt)("p",null,"This code is very similar to our previous method. There are three key differences:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Our new function returns another function (which takes ",(0,i.kt)("inlineCode",{parentName:"li"},"dispatch")," as an argument)."),(0,i.kt)("li",{parentName:"ul"},"Instead of using ",(0,i.kt)("inlineCode",{parentName:"li"},"setState()")," to alter a component's local state, we are dispatching actions which will update our Redux store."),(0,i.kt)("li",{parentName:"ul"},"We've also updated our code to dispatch an action when there is a failure: ",(0,i.kt)("inlineCode",{parentName:"li"},"dispatch(getHeadlinesFailure(error));"),". Note that we've moved this code into a catch block. That way, if there is a failure in the process, control will shift to the catch block and the correct action will be dispatched for error-handling. ")),(0,i.kt)("p",null,"Now let's take a closer look at these two key differences. We'll start with the first: our outer function returns an inner function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export const makeApiCall = () => {\n  return dispatch => {\n    ...\n  }\n}\n")),(0,i.kt)("p",null,"In order to use Redux Thunk, an asynchronous action needs to return an inner function. This inner (anonymous) function can take two parameters: the store's ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"getState")," methods. Generically, a Redux Thunk function looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function thunkFunction() {\n  return (dispatch, getState) {\n    ...\n  }\n}\n")),(0,i.kt)("p",null,"We will always need the first parameter - otherwise, we wouldn't be able to dispatch reducer actions within our async action, which would defeat the purpose of using Redux Thunk in the first place. However, we'll only use the ",(0,i.kt)("inlineCode",{parentName:"p"},"getState")," parameter if we need access to state from the Redux store. We don't need the ",(0,i.kt)("inlineCode",{parentName:"p"},"getState")," parameter in this application because our async action doesn't need access to Redux state. However, you may well find yourself creating async actions that need to use Redux state in your own applications. If so, remember that you need to pass in the store's ",(0,i.kt)("inlineCode",{parentName:"p"},"getState")," method to access it. You could then deconstruct any state properties you need in the async action like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function thunkFunction() {\n  return (dispatch, getState) {\n    const { neededState1, neededState2 } = getState();\n    ...\n  }\n}\n")),(0,i.kt)("p",null,"Now let's take a look at the other big change to our function: we are dispatching actions instead of updating local state."),(0,i.kt)("p",null,"Here's our inner function again:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"return dispatch => {\n  dispatch(requestHeadlines);\n  return fetch(`https://api.nytimes.com/svc/topstories/v2/home.json?api-key=${process.env.REACT_APP_API_KEY}`)\n    .then(response => response.json())\n    .then(\n      (jsonifiedResponse) => {\n      dispatch(getHeadlinesSuccess(jsonifiedResponse.results));\n      })\n    .catch((error) => {\n      dispatch(getHeadlinesFailure(error));\n    });\n}\n")),(0,i.kt)("p",null,"Before we make our API call, we'll need to dispatch the ",(0,i.kt)("inlineCode",{parentName:"p"},"REQUEST_HEADLINES")," action. Note that we have our handy ",(0,i.kt)("inlineCode",{parentName:"p"},"requestHeadlines")," action creator to make our code a little cleaner. This will update the store's state so ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Next, we use ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch()")," to make our API call. If the call is successful, we dispatch another action. The ",(0,i.kt)("inlineCode",{parentName:"p"},"getHeadlinesSuccess()")," action creator takes the response's ",(0,i.kt)("inlineCode",{parentName:"p"},"results")," as an argument. These are the daily headlines which we want to pass as a payload into the ",(0,i.kt)("inlineCode",{parentName:"p"},"GET_HEADLINES_SUCCESS")," action. When this action is triggered, our store will be updated: ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," will be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"headlines")," will be updated to the response's payload."),(0,i.kt)("p",null,"If there's an error, a different action will be dispatched. The ",(0,i.kt)("inlineCode",{parentName:"p"},"getHeadlinesFailure()")," action creator will trigger the ",(0,i.kt)("inlineCode",{parentName:"p"},"GET_HEADLINES_FAILURE")," action - and pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"error")," from the API response along to the Redux store."),(0,i.kt)("p",null,"That's all there is to an asynchronous action handled by Redux Thunk. It's a function that returns another function. That function takes up to two parameters - ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"getState"),". We can then dispatch pure reducer actions as needed within our async action - or even access the state of the store with ",(0,i.kt)("inlineCode",{parentName:"p"},"getState"),"."),(0,i.kt)("p",null,"In the next lesson, we'll bring it all together and complete our application!"))}d.isMDXComponent=!0}}]);