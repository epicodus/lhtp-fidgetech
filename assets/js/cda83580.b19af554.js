"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[98763],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},42498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7896),o=(n(2784),n(30876));const a={title:"\ud83d\udcd3 4.3.0.10 Changing Selected Tickets",id:"43010-changing-selected-tickets",slug:"43010-changing-selected-tickets",hide_table_of_contents:!0,sidebar_position:10,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0h_changing_selected_tickets.md"},r=void 0,l={unversionedId:"fidgetech-4-react/react-with-nosql/43010-changing-selected-tickets",id:"fidgetech-4-react/react-with-nosql/43010-changing-selected-tickets",title:"\ud83d\udcd3 4.3.0.10 Changing Selected Tickets",description:"In the last lesson, we got our list of tickets showing again. However, we can't click on them. In this lesson, we will restore that functionality. In the process, we'll learn about a React Redux Firebase piece of functionality called withFirestore(). We'll also learn how to use a method called get() to retrieve data from Firestore.",source:"@site/docs/fidgetech-4-react/react-with-nosql/0h-changing-selected-tickets.md",sourceDirName:"fidgetech-4-react/react-with-nosql",slug:"/fidgetech-4-react/react-with-nosql/43010-changing-selected-tickets",permalink:"/fidgetech-4-react/react-with-nosql/43010-changing-selected-tickets",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"\ud83d\udcd3 4.3.0.10 Changing Selected Tickets",id:"43010-changing-selected-tickets",slug:"43010-changing-selected-tickets",hide_table_of_contents:!0,sidebar_position:10,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0h_changing_selected_tickets.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.3.0.9 Viewing Tickets from Firestore",permalink:"/fidgetech-4-react/react-with-nosql/4309-viewing-tickets-from-firestore"},next:{title:"\ud83d\udcd3 4.3.0.11 Updating Tickets with Firestore",permalink:"/fidgetech-4-react/react-with-nosql/43011-updating-tickets-with-firestore"}},s={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the last lesson, we got our list of tickets showing again. However, we can't click on them. In this lesson, we will restore that functionality. In the process, we'll learn about a React Redux Firebase piece of functionality called ",(0,o.kt)("inlineCode",{parentName:"p"},"withFirestore()"),". We'll also learn how to use a method called ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," to retrieve data from Firestore."),(0,o.kt)("p",null,"If we take a look at our ",(0,o.kt)("inlineCode",{parentName:"p"},"handleChangingSelectedTicket()")," method in ",(0,o.kt)("inlineCode",{parentName:"p"},"TicketControl.js"),", it should be obvious why it no longer works:"),(0,o.kt)("div",{class:"filename"},"src/components/TicketControl.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"handleChangingSelectedTicket = (id) => {\n  const selectedTicket = this.props.masterTicketList[id];\n  this.setState({selectedTicket: selectedTicket});\n}\n")),(0,o.kt)("p",null,"We are no longer storing our tickets in the ",(0,o.kt)("inlineCode",{parentName:"p"},"masterTicketList")," state slice in our Redux store. In fact, we don't need that state slice at all anymore (and it can be removed from ",(0,o.kt)("inlineCode",{parentName:"p"},"mapStateToProps")," as well)."),(0,o.kt)("p",null,"Let's update this method to get the specific ticket we need from Firestore."),(0,o.kt)("p",null,"First, we'll need to import Firestore functionality via React Redux Firebase:"),(0,o.kt)("div",{class:"filename"},"src/components/TicketControl.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { withFirestore } from 'react-redux-firebase'\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"withFirestore()")," is a wrapper method much like the React Redux ",(0,o.kt)("inlineCode",{parentName:"p"},"connect()")," method. To use it, we need to wrap this method around the ",(0,o.kt)("inlineCode",{parentName:"p"},"TicketControl")," component in the final line of code in ",(0,o.kt)("inlineCode",{parentName:"p"},"TicketControl.js"),":"),(0,o.kt)("div",{class:"filename"},"src/components/TicketControl.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export default withFirestore(TicketControl);\n")),(0,o.kt)("p",null,"Just as we do with the ",(0,o.kt)("inlineCode",{parentName:"p"},"connect()")," method from React Redux, we're using a higher order component to give our component the functionality it needs (the ability to use Firestore)."),(0,o.kt)("p",null,"This makes Firestore available to our application via ",(0,o.kt)("inlineCode",{parentName:"p"},"this.props.firestore"),"."),(0,o.kt)("p",null,"Now we're ready to update our ",(0,o.kt)("inlineCode",{parentName:"p"},"handleChangingSelectedTicket()")," method:"),(0,o.kt)("div",{class:"filename"},"src/components/TicketControl.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'handleChangingSelectedTicket = (id) => {\n  this.props.firestore.get({collection: \'tickets\', doc: id}).then((ticket) => {\n    const firestoreTicket = {\n      names: ticket.get("names"),\n      location: ticket.get("location"),\n      issue: ticket.get("issue"),\n      id: ticket.id\n    }\n    this.setState({selectedTicket: firestoreTicket });\n  });\n}\n')),(0,o.kt)("p",null,"We can use Firestore's ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," method to manually retrieve a collection or a subset of a collection. In this case, we want a ticket with a specific id so we do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"this.props.firestore.get({collection: 'tickets', doc: id})\n")),(0,o.kt)("p",null,"Note that we pass ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," into a property called ",(0,o.kt)("inlineCode",{parentName:"p"},"doc"),"."),(0,o.kt)("p",null,"This returns a pending promise. As we know from Intermediate JavaScript, we can chain ",(0,o.kt)("inlineCode",{parentName:"p"},"then()")," to a promise. But what exactly does our promise return? It doesn't return a ",(0,o.kt)("inlineCode",{parentName:"p"},"ticket"),". It returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentSnapshot"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentSnapshot")," is a Firestore object that contains read-only data of a specified document. The ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," of the document is readily available but we have to use a ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," method to grab each specific property. Note that this is a ",(0,o.kt)("em",{parentName:"p"},"different")," ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," method than the one we use to actually retrieve the document from Firestore."),(0,o.kt)("p",null,"That's why we have to do the following to grab a property such as ",(0,o.kt)("inlineCode",{parentName:"p"},"location"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'location: ticket.get("location")\n')),(0,o.kt)("p",null,"We reconstruct a ticket and then set that object to the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"firestoreTicket"),". Now we have a value to pass into ",(0,o.kt)("inlineCode",{parentName:"p"},"selectedTicket"),". When we run our application and click on a ticket, we'll be able to go to the ticket detail page (though the edit and delete functionality won't be working)."),(0,o.kt)("p",null,"A few things to note here. This isn't necessarily the most efficient way to get the value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectedTicket"),". Why make a request to the Firestore database when the value of our tickets is already in our application? Well, it's a perfect opportunity to see how ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," works - and Firestore is fast enough - and our application small enough - that it has minimal impact on our application's performance."),(0,o.kt)("p",null,"Also, what would happen if an id isn't correctly passed into this function - or if the id no longer exists in the database? This could definitely be an issue in a larger application. A best practice here would be to add error handling and perhaps a try/catch block. If you'd like to refresh yourself on these concepts from Intermediate JavaScript, you may want to try adding this functionality on your own."),(0,o.kt)("p",null,"In this lesson, we learned about React Redux Firebase's ",(0,o.kt)("inlineCode",{parentName:"p"},"withFirestore()")," function, which we can use to add functionality to a class component. ",(0,o.kt)("inlineCode",{parentName:"p"},"withFirestore()")," adds Firestore to a component's props, allowing us to use it for any kind of requests, not just ",(0,o.kt)("inlineCode",{parentName:"p"},"get()"),". We could use it to update or delete tickets, for instance. Over the next few lessons, we'll get update and delete functionality working in our application again."))}u.isMDXComponent=!0}}]);