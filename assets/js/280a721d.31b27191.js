"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[58253],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(7896),a=(n(2784),n(30876));const r={title:"\ud83d\udcd3 4.3.0.7 Introduction to Hooks",id:"4307-introduction-to-hooks",slug:"4307-introduction-to-hooks",hide_table_of_contents:!0,sidebar_position:7,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0ea_intro_to_state_hooks.md"},i=void 0,s={unversionedId:"fidgetech-4-react/react-with-nosql/4307-introduction-to-hooks",id:"fidgetech-4-react/react-with-nosql/4307-introduction-to-hooks",title:"\ud83d\udcd3 4.3.0.7 Introduction to Hooks",description:"In this course section, we'll be using several external libraries to combine React with Redux and Firebase. We'll learn about several custom hooks that these libraries offer.",source:"@site/docs/fidgetech-4-react/react-with-nosql/0ea-intro-to-state-hooks.md",sourceDirName:"fidgetech-4-react/react-with-nosql",slug:"/fidgetech-4-react/react-with-nosql/4307-introduction-to-hooks",permalink:"/fidgetech-4-react/react-with-nosql/4307-introduction-to-hooks",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"\ud83d\udcd3 4.3.0.7 Introduction to Hooks",id:"4307-introduction-to-hooks",slug:"4307-introduction-to-hooks",hide_table_of_contents:!0,sidebar_position:7,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0ea_intro_to_state_hooks.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.3.0.6 Adding Firebase to React",permalink:"/fidgetech-4-react/react-with-nosql/4306-adding-firebase-to-react"},next:{title:"\ud83d\udcd3 4.3.0.8 Adding Tickets to Firestore",permalink:"/fidgetech-4-react/react-with-nosql/4308-adding-tickets-to-firestore"}},l={},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this course section, we'll be using several external libraries to combine React with Redux and Firebase. We'll learn about several custom ",(0,a.kt)("strong",{parentName:"p"},"hooks")," that these libraries offer."),(0,a.kt)("p",null,"Hooks were developed as a solution to a common React problem: how can we use state in a function component without having to refactor it into a class component?"),(0,a.kt)("p",null,"In this lesson, we'll cover React's built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook by looking at an example of a simple counter app. This example includes a button that increases the value of a counter, a button to show and hide, and a display of the counter's value. You do not need to code along with this lesson (though you are welcome to do so)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note: If you choose to follow along, you would probably want to start a new project using create-react-app, like this for example: ",(0,a.kt)("inlineCode",{parentName:"strong"},"npx create-react-app state-hook-example"),". This lesson doesn't walk through the steps of setting up the project but would only need you to import the ",(0,a.kt)("inlineCode",{parentName:"strong"},"<Counter/>")," component into your App, and place it inside the return statement. If you run into issues, don't forget you can ask a classmate or instructor for help.")),(0,a.kt)("p",null,"If you choose to follow along, your App.js should look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport './App.css';\nimport Counter from \"./Counter.js\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Counter />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n")),(0,a.kt)("p",null,"The first thing we need to do is import ",(0,a.kt)("inlineCode",{parentName:"p"},"{ useState }"),". We'll also set up a basic function component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState } from 'react';\n\nfunction Counter() {\n  return(\n    <React.Fragment>\n    </React.Fragment>\n  )\n}\n\nexport default Counter;\n")),(0,a.kt)("p",null,"Now we're ready to implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," object, which always returns an array containing two items. The first item is the state property and the second is a method we can use to set the property's value. ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," itself takes an argument, which will set the state property's initial value. We can initialize this with a number, a boolean, a string, or an object. In this example, we'll initialize ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," with the number 0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"...\n\nfunction Counter() {\n\n  const [counter, setCounter] = useState(0);\n\n  return(\n    <React.Fragment>\n    </React.Fragment>\n  )\n}\n\n...\n")),(0,a.kt)("p",null,"In the example above, ",(0,a.kt)("inlineCode",{parentName:"p"},"counter")," is the state while ",(0,a.kt)("inlineCode",{parentName:"p"},"setCounter")," is the function we use to update the state. As we see in the example above, we pass ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," because this is the initial state."),(0,a.kt)("p",null,"Now we're ready to actually utilize this new functionality. We'll create a button to update the value of the counter - and we'll also display the value of the counter as well. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"...\n\nfunction Counter() {\n\n  const [counter, setCounter] = useState(0);\n\n  return (\n    <React.Fragment>\n      <h1>{counter}</h1>\n      <button onClick={() => setCounter(counter + 1)}>Count!</button>\n    </React.Fragment>\n  );\n}\n\n...\n")),(0,a.kt)("p",null,"We can simply call ",(0,a.kt)("inlineCode",{parentName:"p"},"counter")," using JSX, which will display that property's current value. We also create an ",(0,a.kt)("inlineCode",{parentName:"p"},"onClick")," listener so that a user can click a button to trigger the ",(0,a.kt)("inlineCode",{parentName:"p"},"setCounter")," method. We need this to be a callback function so we can pass in an argument, otherwise it'll run on page load. This will replace the current value of ",(0,a.kt)("inlineCode",{parentName:"p"},"counter"),", overwriting its previous value."),(0,a.kt)("p",null,"With just a couple of lines, we have local state in a function component. Remember, this has nothing to do with our single-source-of-truth global state, but it's still quite handy."),(0,a.kt)("p",null,"Let's say we want to add another property to our local state object. We could approach that by doing the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'\n...\nfunction Counter() {\n\n  const [bundle, setBundle] = useState({"hidden": true, "counter": 0});\n\n  return (\n    <React.Fragment>\n      {bundle.hidden ? <h1>{bundle.counter}</h1> : <h1>Count Hidden</h1>}\n\n      <button onClick={() => setBundle({...bundle, "counter": bundle.counter +1})}>Count!</button>\n      <button onClick={() => setBundle({...bundle, "hidden": !bundle.hidden})}>Hide/Show</button>\n    </React.Fragment>\n  );\n}\n\n...\n')),(0,a.kt)("p",null,"React's ",(0,a.kt)("inlineCode",{parentName:"p"},"useState()")," accepts any data type as an argument, including objects. We could create as many properties as we like and call on them using dot notation. But while the above approach works, it isn't recommended. The React documentation instead recommends creating multiple instances of useState and calling on them as separate variables. Take a look at this approach instead:  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"\n...\nfunction Counter() {\n\n  const [counter, setCounter] = useState(0);\n  const [hidden, setHidden] = useState(true);\n\n  return (\n    <React.Fragment>\n      {hidden ? <h1>{counter}</h1> : <h1>Count Hidden</h1>}\n      <button onClick={() => setCounter(counter + 1)}>Count!</button>\n      <button onClick={() => setHidden(!hidden)}>Hide/Show</button>\n    </React.Fragment>\n  );\n}\n\n...\n")),(0,a.kt)("p",null,"It's not only easier to read the state variable declarations, it's easier to use the state in our JSX."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook is very useful and we recommend using hooks in your application where possible. If you'd like to learn more about the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook, check the official ",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"React Hooks Docs"),"."),(0,a.kt)("p",null,"Now that we have a basic understanding of hooks, we're ready to start using some custom hooks to interact with Firebase."))}d.isMDXComponent=!0}}]);