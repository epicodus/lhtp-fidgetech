"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[5172],{30876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),h=a,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},95374:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7896),a=(r(2784),r(30876));const o={title:"\ud83d\udcd3 4.2.0.3 Setting Up Our First Project",id:"4203-setting-up-our-first-project",slug:"4203-setting-up-our-first-project",hide_table_of_contents:!0,sidebar_position:3,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0c_setting_up_our_first_project.md"},i=void 0,s={unversionedId:"fidgetech-4-react/react-with-redux/4203-setting-up-our-first-project",id:"fidgetech-4-react/react-with-redux/4203-setting-up-our-first-project",title:"\ud83d\udcd3 4.2.0.3 Setting Up Our First Project",description:"Over the next several lessons, we will learn about reducers and use them to create all the CRUD functionality we'll need in our help queue.",source:"@site/docs/fidgetech-4-react/react-with-redux/0c-setting-up-our-first-project.md",sourceDirName:"fidgetech-4-react/react-with-redux",slug:"/fidgetech-4-react/react-with-redux/4203-setting-up-our-first-project",permalink:"/fidgetech-4-react/react-with-redux/4203-setting-up-our-first-project",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\ud83d\udcd3 4.2.0.3 Setting Up Our First Project",id:"4203-setting-up-our-first-project",slug:"4203-setting-up-our-first-project",hide_table_of_contents:!0,sidebar_position:3,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0c_setting_up_our_first_project.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.2.0.2 Introduction to Redux",permalink:"/fidgetech-4-react/react-with-redux/4202-introduction-to-redux"},next:{title:"\ud83d\udcd3 4.2.0.4 Writing Our First Redux Test",permalink:"/fidgetech-4-react/react-with-redux/4204-writing-our-first-redux-test"}},l={},c=[{value:"<code>create-react-app</code> and Jest",id:"create-react-app-and-jest",level:3},{value:"File Structure and Naming Conventions",id:"file-structure-and-naming-conventions",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Over the next several lessons, we will learn about reducers and use them to create all the CRUD functionality we'll need in our help queue."),(0,a.kt)("p",null,"We do not need the help queue application we created in the React Fundamentals course section to create our reducers and tests. ",(0,a.kt)("strong",{parentName:"p"},"However, we will be integrating these reducers and tests with our help queue application later in these lessons.")," For that reason, we recommend building off that project starting now. You may either use your own repo or use the following repo, which contains all the code from the React Fundamentals course section: "),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/epicodus-lessons/week-3-updated-redux-starter-project"},(0,a.kt)("i",{class:"glyphicon glyphicon-folder-open"}),"  Example GitHub Repo for Help Queue"))),(0,a.kt)("p",null,"Note that the remainder of this lesson can be applied both to the help queue project and to setting up new projects that will use Redux."),(0,a.kt)("h3",{id:"create-react-app-and-jest"},(0,a.kt)("inlineCode",{parentName:"h3"},"create-react-app")," and Jest"),(0,a.kt)("p",null,"Fortunately, ",(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," is ready for us to start writing tests right out of the box. ",(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," uses Jest, though this isn't apparent from the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file that ",(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," generates, which has the following script for the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"test": "react-scripts test"\n')),(0,a.kt)("p",null,"Remember that ",(0,a.kt)("inlineCode",{parentName:"p"},"react-scripts")," takes care of our configuration under the hood so we don't have to add any packages like Babel. "),(0,a.kt)("p",null,"Be careful if you do choose to modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," script. For instance, the following will not work:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'// This will not work!\n\n"test": "jest"\n')),(0,a.kt)("p",null,"Even though ",(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," is using Jest under the hood, it is doing so with a specific configuration (which includes Babel). If we just run the ",(0,a.kt)("inlineCode",{parentName:"p"},"jest")," command, it will do so without Babel and everything else we need to run our tests. As you may recall from our JavaScript course, Jest uses Node ",(0,a.kt)("inlineCode",{parentName:"p"},"require")," statements and doesn't recognize ",(0,a.kt)("inlineCode",{parentName:"p"},"import")," statements without help from Babel. This is just one of many little details that ",(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," takes care of for us!"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," does not come with Redux. This makes sense - Redux is a separate state management library and smaller React applications won't need it. There's no need to bloat ",(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," with packages that we might not need."),(0,a.kt)("p",null,"Over the next handful of lessons, we will just be building and testing our first reducer. Since it is just plain JavaScript, we actually don't need to use Redux yet, so we won't add it until we actually plan to incorporate Redux into our help queue project."),(0,a.kt)("h3",{id:"file-structure-and-naming-conventions"},"File Structure and Naming Conventions"),(0,a.kt)("p",null,"Create a directory called ",(0,a.kt)("inlineCode",{parentName:"p"},"__tests__")," inside ",(0,a.kt)("inlineCode",{parentName:"p"},"src"),". Then add a directory to ",(0,a.kt)("inlineCode",{parentName:"p"},"__tests__")," called ",(0,a.kt)("inlineCode",{parentName:"p"},"reducers"),"."),(0,a.kt)("p",null,"Finally, add a directory called ",(0,a.kt)("inlineCode",{parentName:"p"},"reducers")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"src"),". (This is ",(0,a.kt)("strong",{parentName:"p"},"different")," from our other ",(0,a.kt)("inlineCode",{parentName:"p"},"reducers")," directory - one holds our reducer tests while the other holds the actual reducers.)"),(0,a.kt)("p",null,"The file structure for these directories should look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src\n  |__  reducers\n  |__  __tests__\n        |__  reducers\n")),(0,a.kt)("p",null,"We will be using this structure for our tests and reducers for the rest of this course."),(0,a.kt)("p",null,"We will also append ",(0,a.kt)("inlineCode",{parentName:"p"},"test.js")," to the name of all of our test files. This way, Jest will properly be able to find our tests."),(0,a.kt)("p",null,"Our first test will be named ",(0,a.kt)("inlineCode",{parentName:"p"},"ticket-list-reducer.test.js"),". Note that we will use hyphens to separate words (not underscores or other special characters). The name of our first test clearly states what this reducer will handle: our ticket list."),(0,a.kt)("p",null,"In the next lesson, we'll write a test for our first reducer - and start building the reducer itself."),(0,a.kt)("p",null,"By the way, note that we haven't actually installed Redux in our project yet - that's because our reducers and tests are just plain JavaScript and use Jest tests."))}d.isMDXComponent=!0}}]);