"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[38181],{30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(h,r(r({ref:t},d),{},{components:n})):o.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},35930:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(7896),i=(n(2784),n(30876));const a={title:"\ud83d\udcd3 4.3.0.8 Adding Tickets to Firestore",id:"4308-adding-tickets-to-firestore",slug:"4308-adding-tickets-to-firestore",hide_table_of_contents:!0,sidebar_position:8,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0f_adding_tickets_to_firestore.md"},r=void 0,l={unversionedId:"fidgetech-4-react/react-with-nosql/4308-adding-tickets-to-firestore",id:"fidgetech-4-react/react-with-nosql/4308-adding-tickets-to-firestore",title:"\ud83d\udcd3 4.3.0.8 Adding Tickets to Firestore",description:'React 16.8 added a powerful and convenient piece of functionality: the ability to use hooks. A hook is simply a way to "hook" a piece of state to a function component. The latest version of React Redux Firebase took advantage of this functionality to add hooks to its library as well.',source:"@site/docs/fidgetech-4-react/react-with-nosql/0f-adding-tickets-to-firestore.md",sourceDirName:"fidgetech-4-react/react-with-nosql",slug:"/fidgetech-4-react/react-with-nosql/4308-adding-tickets-to-firestore",permalink:"/fidgetech-4-react/react-with-nosql/4308-adding-tickets-to-firestore",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"\ud83d\udcd3 4.3.0.8 Adding Tickets to Firestore",id:"4308-adding-tickets-to-firestore",slug:"4308-adding-tickets-to-firestore",hide_table_of_contents:!0,sidebar_position:8,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0f_adding_tickets_to_firestore.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.3.0.7 Introduction to Hooks",permalink:"/fidgetech-4-react/react-with-nosql/4307-introduction-to-hooks"},next:{title:"\ud83d\udcd3 4.3.0.9 Viewing Tickets from Firestore",permalink:"/fidgetech-4-react/react-with-nosql/4309-viewing-tickets-from-firestore"}},s={},c=[],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"React 16.8 added a powerful and convenient piece of functionality: the ability to use ",(0,i.kt)("strong",{parentName:"p"},"hooks"),'. A hook is simply a way to "hook" a piece of state to a function component. The latest version of React Redux Firebase took advantage of this functionality to add hooks to its library as well.'),(0,i.kt)("p",null,"As of now, we have a ",(0,i.kt)("inlineCode",{parentName:"p"},"NewTicketForm")," function component that communicates with our ",(0,i.kt)("inlineCode",{parentName:"p"},"TicketControl")," class component which in turn communicates with the store. Well, if we use a hook, we no longer need to have ",(0,i.kt)("inlineCode",{parentName:"p"},"TicketControl")," in the middle - at least for communicating with Firestore."),(0,i.kt)("p",null,"Note that hooks can't be used with class-based components. They already have the ability to use state and the point of hooks is to be able to use simple state in function components. We will discuss how to add this functionality to a class-based component with a HOC in a future lesson."),(0,i.kt)("p",null,"We'll start by importing the ",(0,i.kt)("inlineCode",{parentName:"p"},"useFirestore()")," hook to our ",(0,i.kt)("inlineCode",{parentName:"p"},"NewTicketForm")," component:"),(0,i.kt)("div",{class:"filename"},"src/components/NewTicketForm.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { useFirestore } from 'react-redux-firebase'\n")),(0,i.kt)("p",null,"This hook allows us to do the following in our component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const firestore = useFirestore();\n")),(0,i.kt)("p",null,"In turn, we'll be able to use any Firestore methods we need, ranging from ",(0,i.kt)("inlineCode",{parentName:"p"},"add()")," (which adds documents to a collection) to ",(0,i.kt)("inlineCode",{parentName:"p"},"get()")," (which retrieves documents from a collection)."),(0,i.kt)("p",null,"Let's incorporate it now, along with the code needed to actually add a ticket to Firestore:"),(0,i.kt)("div",{class:"filename"},"src/components/NewTicketForm.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\n// Note that we are removing the following two libraries - we'll explain why in a moment.\n\n// import { v4 } from 'uuid';\n// import Moment from 'moment';\nimport { useFirestore } from 'react-redux-firebase'\n\nfunction NewTicketForm(props){\n\n  // We add the useFirestore() hook to make Firestore available to our component. (Make sure it lives *inside* the NewTicketForm component.)\n  const firestore = useFirestore();\n  \n  // Note that we updated the name of the function for adding a ticket to addTicketToFirestore. This is a more accurate name for what the function will do now.\n  function addTicketToFirestore(event) {\n    event.preventDefault();\n\n    // We will still need our onNewTicketCreation() method to toggle between components - but it will no longer take an argument because it no longer handles creating a ticket.\n    props.onNewTicketCreation();\n\n    // Here's how we will actually add a ticket to Firestore.\n\n    return firestore.collection('tickets').add({\n      names: event.target.names.value,\n      location: event.target.location.value,\n      issue: event.target.issue.value,\n      timeOpen: firestore.FieldValue.serverTimestamp()\n    });\n  }\n\n  return (\n    <React.Fragment>\n      <ReusableForm \n        // Don't forget to change the name of the function here as well.\n        formSubmissionHandler={addTicketToFirestore}\n        buttonText=\"Help!\" />\n    </React.Fragment>\n  );\n}\n\n...\n")),(0,i.kt)("p",null,"We've made a handful of changes and annotated all of the changes above. Now let's go into the changes in more detail:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"uuid")," library because Firebase will now create IDs for our tickets. We should no longer do this in our application.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"moment")," library because Firebase doesn't support Moment-formatted time. Instead, we'll use Firebase to create a timestamp which we can then use to compute how long a ticket has been open.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We add the line ",(0,i.kt)("inlineCode",{parentName:"p"},"const firestore = useFirestore();"),". This will allow us to use Firestore methods in the component.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Note that we still have the line ",(0,i.kt)("inlineCode",{parentName:"p"},"props.onNewTicketCreation()"),". However, ",(0,i.kt)("inlineCode",{parentName:"p"},"onNewTicketCreation")," no longer takes an argument. This is because we'll no longer use this method to handle ticket creation. However, once a ticket is created, we still need to hide the form and show the ticket list. Since determining which component should show is the responsibility of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TicketControl")," component, we'll still use this method to handle that job. (We'll also update this method in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TicketControl")," component soon.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Finally, we return a Firestore method:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"  return firestore.collection('tickets').add(\n    {\n      names: event.target.names.value,\n      location: event.target.location.value, \n      issue: event.target.issue.value,\n      timeOpen: firestore.FieldValue.serverTimestamp()\n    }\n  );\n")),(0,i.kt)("p",null,"We need to specify which collection we will add a ticket to. Since the collection will hold tickets, we'll call it ",(0,i.kt)("inlineCode",{parentName:"p"},"tickets"),". Note that unlike with a SQL database, our Firestore database doesn't care if this collection doesn't exist in the database yet. A collection is loosely equivalent to an SQL table - except we'd need to create the table along with a schema if we were using SQL. If the collection doesn't exist, Firestore will add it. If it does, Firestore will add the ticket to the existing collection."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"add()")," is the Firestore method used to add a record to the database. We specify the values we want to add. Firestore also doesn't care if these values are predefined in the database. One ticket could have a property called ",(0,i.kt)("inlineCode",{parentName:"p"},"specialNotes")," while another could have a ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," property and Firestore wouldn't care. For the purpose of data normalization, this wouldn't be a great idea, but the point is that Firestore is very flexible."),(0,i.kt)("p",null,"Finally, we specify that ",(0,i.kt)("inlineCode",{parentName:"p"},"timeOpen")," should now be equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"firestore.FieldValue.serverTimestamp()")," instead of a ",(0,i.kt)("inlineCode",{parentName:"p"},"new Moment()"),"."),(0,i.kt)("p",null,"At this point, if we run our application, we can successfully add tickets to Firestore. They won't show up in our application yet, but if we navigate to \"Database\" in the Firebase console, we'll see a new ",(0,i.kt)("inlineCode",{parentName:"p"},"tickets")," collection which includes any tickets we create."),(0,i.kt)("p",null,"Next, let's refactor our ",(0,i.kt)("inlineCode",{parentName:"p"},"TicketControl")," to accommodate these changes. We just need to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleAddingNewTicketToList()")," method:"),(0,i.kt)("div",{class:"filename"},"src/components/TicketControl.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\nhandleAddingNewTicketToList = () => {\n  const { dispatch } = this.props;\n  const action = a.toggleForm();\n  dispatch(action);\n}\n...\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: At this point, if we run our application, we can successfully add tickets to Firestore. They won't show up in our application yet, but if we navigate to \"Firestore Database\" in the Firebase console, we'll see a new ",(0,i.kt)("inlineCode",{parentName:"strong"},"tickets")," collection which includes any tickets we create. (you may need to refresh the page)")),(0,i.kt)("p",null,"We no longer use the ",(0,i.kt)("inlineCode",{parentName:"p"},"addTicket()")," action creator (nor do we dispatch that action) because the Firestore reducer is handling that now."),(0,i.kt)("p",null,"As a result, there are several other things we can refactor out of this application:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"ADD_TICKET")," constant in ",(0,i.kt)("inlineCode",{parentName:"li"},"src/actions/ActionTypes.js"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"export const ADD_TICKET = 'ADD_TICKET';"),"."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"addTicket()")," action creator in ",(0,i.kt)("inlineCode",{parentName:"li"},"src/actions/index.js"),"."),(0,i.kt)("li",{parentName:"ul"},"Remove the ",(0,i.kt)("inlineCode",{parentName:"li"},"c.ADD_TICKET")," case from the switch statement in ",(0,i.kt)("inlineCode",{parentName:"li"},"src/reducers/ticket-list-reducer.js"),", as well as ",(0,i.kt)("inlineCode",{parentName:"li"},"names"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"location"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"issue"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"timeOpen")," from the const destructuring action at the top of the doc."),(0,i.kt)("li",{parentName:"ul"},"Any tests related to the above."),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"TicketControl.js"),", comment out ",(0,i.kt)("inlineCode",{parentName:"li"},"handleEditingTicketInList"),". We'll return to that method later. ")),(0,i.kt)("p",null,"Go ahead and make these changes before moving on to the next lesson."))}u.isMDXComponent=!0}}]);