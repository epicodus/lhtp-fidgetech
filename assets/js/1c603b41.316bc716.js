"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[34103],{30876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=a,f=d["".concat(l,".").concat(h)]||d[h]||p[h]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},43106:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7896),a=(r(2784),r(30876));const i={title:"\ud83d\udcd3 4.3.2.2 Firestore Queries",id:"4322-firestore-queries",slug:"4322-firestore-queries",hide_table_of_contents:!0,sidebar_position:20,day:"tuesday",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/2b_firestore_queries.md"},o=void 0,s={unversionedId:"fidgetech-4-react/react-with-nosql/4322-firestore-queries",id:"fidgetech-4-react/react-with-nosql/4322-firestore-queries",title:"\ud83d\udcd3 4.3.2.2 Firestore Queries",description:"As our data gets more complex, we'll want to use queries to filter our data. In .NET, we used each framework's respective ORM (ActiveRecord and Entity) to write queries that include Where() clauses.",source:"@site/docs/fidgetech-4-react/react-with-nosql/2b-firestore-queries.md",sourceDirName:"fidgetech-4-react/react-with-nosql",slug:"/fidgetech-4-react/react-with-nosql/4322-firestore-queries",permalink:"/fidgetech-4-react/react-with-nosql/4322-firestore-queries",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"\ud83d\udcd3 4.3.2.2 Firestore Queries",id:"4322-firestore-queries",slug:"4322-firestore-queries",hide_table_of_contents:!0,sidebar_position:20,day:"tuesday",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/2b_firestore_queries.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.3.2.1 Hosting with Firebase",permalink:"/fidgetech-4-react/react-with-nosql/4321-hosting-with-firebase"},next:{title:"\ud83d\udcd3 4.3.2.3 Styled Components",permalink:"/fidgetech-4-react/react-with-nosql/4323-styled-components"}},l={},c=[{value:"Running Firestore Queries in Firebase Console",id:"running-firestore-queries-in-firebase-console",level:2},{value:"Compound Queries",id:"compound-queries",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As our data gets more complex, we'll want to use queries to filter our data. In .NET, we used each framework's respective ORM (ActiveRecord and Entity) to write queries that include ",(0,a.kt)("inlineCode",{parentName:"p"},"Where()")," clauses."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"where()")," clause can be used to filter data, and fortunately, Firestore uses this terminology, too."),(0,a.kt)("p",null,"Firebase offers solid documentation on ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/firestore/query-data/queries"},"Firestore queries"),"."),(0,a.kt)("p",null,"When we discussed data structures in the 4.3.0 lessons, we considered a hypothetical use case of an application for finding and reviewing trails. Let's see how we might structure some queries for finding different trails based on their ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"trailLength"),"."),(0,a.kt)("h2",{id:"running-firestore-queries-in-firebase-console"},"Running Firestore Queries in Firebase Console"),(0,a.kt)("p",null,'We can actually try simple queries in the Firebase console. Start by clicking on the "Database" tab of a project. Our data is sorted into three columns. The left column has a list of our collections, the middle column has our documents, and the right column has the fields of a selected document.'),(0,a.kt)("p",null,"There's a small icon at the top of the middle column that allows us to filter data:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://learnhowtoprogram.s3.us-west-2.amazonaws.com/React/Week-4-React-2020/firebase-console-filter.png",alt:"Icon shows how we can filter data in Firebase."})),(0,a.kt)("p",null,"If we click on this icon, we can create our own filters. We just need to specify the field and condition we want to filter by. In the example below, we are looking for all trails in the Enchantments region:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://learnhowtoprogram.s3.us-west-2.amazonaws.com/React/Week-4-React-2020/example-of-filter.png",alt:"This filter shows just trails in the Enchantments region."})),(0,a.kt)("p",null,"One thing that's nice is that the console helpfully shows us what the query actually looks like, so we can use this to test simple queries and actually copy and paste the query code into our application."),(0,a.kt)("p",null,"Here's how the query looks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'.collection("trails")\n  .where("region", "==", "Enchantments");\n')),(0,a.kt)("p",null,"This is pretty straightforward. The ",(0,a.kt)("inlineCode",{parentName:"p"},"where()")," clause takes three arguments: a field name, an operator such as ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," or ",(0,a.kt)("inlineCode",{parentName:"p"},">"),", and the value that the field should have."),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"!=")," queries are not supported by Firestore."),(0,a.kt)("p",null,"We can also easily create a query that filters by length of trail, if our trails have a ",(0,a.kt)("inlineCode",{parentName:"p"},"trailLength")," property. We can use other operators such as ",(0,a.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,a.kt)("inlineCode",{parentName:"p"},">")," to find trails that are longer or shorter than a certain length. For instance, we could do this:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://learnhowtoprogram.s3.us-west-2.amazonaws.com/React/Week-4-React-2020/greater-than-filter-with-descending.png",alt:'Here\'s an example that uses the "greater than" operator to filter trails.'})),(0,a.kt)("p",null,"We create a filter that checks that ",(0,a.kt)("inlineCode",{parentName:"p"},"trailLength")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"> 10"),". We also specify it should be in descending order. The clause looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'.collection("trails")\n  .where("trailLength", ">", 10)\n  .orderBy("trailLength", "desc")\n')),(0,a.kt)("h2",{id:"compound-queries"},"Compound Queries"),(0,a.kt)("p",null,"What if we wanted to find trails in a specific region that are longer than ten miles? Can't we just chain two queries together like this?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'.collection("trails")\n  .where("region", "==" "Enchantments")\n  .where("trailLength", ">", 10)\n')),(0,a.kt)("p",null,"This is known as a compound query. These kinds of queries are common with ORMs like ActiveRecord (Rails) and Entity (.NET). We can also do compound queries in Firestore, but only after we do some initial configuration."),(0,a.kt)("p",null,'Firestore requires an index for every query. Rails and .NET students may already be familiar with database indexing (which is optional but often recommended for database performance). A database index is similar to an index in a book. If we want to find all the passages about "loops" in a book on JavaScript, we could do so much faster if we can look in an index and find the specific page numbers where loops are mentioned. Otherwise, we\'d have to go through every single page of the book to find all the passages on loops.'),(0,a.kt)("p",null,"A database index works the same way. It's a structure that allows our queries to be conducted much more efficiently. This is why Firestore requires indexes for all queries - so it can be extremely fast."),(0,a.kt)("p",null,"Firestore automatically indexes all fields, which is why we can do simple queries without creating a custom index. However, once we start chaining queries together, we have to create the indexes ourselves."),(0,a.kt)("p",null,"There is good news, however. If we try to make a query in our code for a combination of fields that aren't properly indexed, our application will throw an error - along with a link to create the missing index. Don't panic if this happens - just follow the link and let Firestore take care of the hard work for you."),(0,a.kt)("p",null,'You can also create indexes manually by clicking on the "Indexes" tab in the Database section of the Firebase console. However, the documentation actually recommends just trying to make queries via an application and following the link if needed. For information on manually creating indexes, see ',(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/firestore/query-data/indexing"},"Managing indexes in Cloud Firestore"),"."),(0,a.kt)("p",null,"Unfortunately, we can't use the filter option in the console to create compound queries - only simple ones. We recommend reading through ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/firestore/query-data/queries"},"Perform simple and compound queries in Cloud Firestore"),", which provides an overview on how to write both simple and compound queries."))}p.isMDXComponent=!0}}]);