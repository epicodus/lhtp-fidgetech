"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[64134],{30876:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(2784);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=d(a),u=o,f=h["".concat(l,".").concat(u)]||h[u]||p[u]||r;return a?n.createElement(f,i(i({ref:t},c),{},{components:a})):n.createElement(f,i({ref:t},c))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},37315:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=a(7896),o=(a(2784),a(30876));const r={title:"\ud83d\udcd3 4.3.0.3 Introduction to NoSQL",id:"4303-introduction-to-nosql",slug:"4303-introduction-to-nosql",hide_table_of_contents:!0,sidebar_position:3,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0ca_introduction_to_nosql.md"},i=void 0,s={unversionedId:"fidgetech-4-react/react-with-nosql/4303-introduction-to-nosql",id:"fidgetech-4-react/react-with-nosql/4303-introduction-to-nosql",title:"\ud83d\udcd3 4.3.0.3 Introduction to NoSQL",description:"Because our applications are small and we are mainly concerned about writing code that works, we won't be able to see many of the benefits of NoSQL firsthand. However, NoSQL is designed to handle massive stores of data better than SQL can so it's often preferred in larger companies. In addition, if companies plan to scale up (and most companies do), NoSQL allows more flexibility.",source:"@site/docs/fidgetech-4-react/react-with-nosql/0ca-introduction-to-nosql.md",sourceDirName:"fidgetech-4-react/react-with-nosql",slug:"/fidgetech-4-react/react-with-nosql/4303-introduction-to-nosql",permalink:"/fidgetech-4-react/react-with-nosql/4303-introduction-to-nosql",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\ud83d\udcd3 4.3.0.3 Introduction to NoSQL",id:"4303-introduction-to-nosql",slug:"4303-introduction-to-nosql",hide_table_of_contents:!0,sidebar_position:3,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0ca_introduction_to_nosql.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.3.0.2 Introduction to Firebase",permalink:"/fidgetech-4-react/react-with-nosql/4302-introduction-to-firebase"},next:{title:"\ud83d\udcd3 4.3.0.4 The CAP Theorem",permalink:"/fidgetech-4-react/react-with-nosql/4304-the-cap-theorem"}},l={},d=[{value:"Differences Between SQL and NoSQL Databases",id:"differences-between-sql-and-nosql-databases",level:2}],c={toc:d},h="wrapper";function p(e){let{components:t,...a}=e;return(0,o.kt)(h,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Because our applications are small and we are mainly concerned about writing code that works, we won't be able to see many of the benefits of NoSQL firsthand. However, NoSQL is designed to handle massive stores of data better than SQL can so it's often preferred in larger companies. In addition, if companies plan to scale up (and most companies do), NoSQL allows more flexibility."),(0,o.kt)("p",null,"In this lesson, we'll cover some of the ways NoSQL is different from SQL - as well as some of the advantages NoSQL offers over SQL. As is the case with most things in programming, there is no one perfect tool for every job."),(0,o.kt)("h2",{id:"differences-between-sql-and-nosql-databases"},"Differences Between SQL and NoSQL Databases"),(0,o.kt)("p",null,"We won't cover all of the differences between SQL and NoSQL databases. Instead, we'll focus on a few of the most significant differences:"),(0,o.kt)("hr",null),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},"SQL"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0"),(0,o.kt)("th",{parentName:"tr",align:"center"},"NoSQL"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Relational"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Non-relational")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Uses a Schema"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0"),(0,o.kt)("td",{parentName:"tr",align:"center"},"No Schema")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Uses SQL (structured query language)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Doesn't use a declarative query language")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Great for complex queries"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Not built for complex queries")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"ACID approach"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0"),(0,o.kt)("td",{parentName:"tr",align:"center"},"BASE approach")))),(0,o.kt)("hr",null),(0,o.kt)("p",null,"As students of C#/.NET and Ruby/Rails learned, SQL is a ",(0,o.kt)("strong",{parentName:"p"},"structured query language")," for relational databases. We use a ",(0,o.kt)("strong",{parentName:"p"},"schema")," to map exactly how our database tables should look - which means that each record in the database has a fixed number of columns. Because the database is relational, we can create complex queries based on the relationships between different records in the database. For example, if we wanted to find all of an author's books, we'd do a query where we find all of the books in the ",(0,o.kt)("inlineCode",{parentName:"p"},"books")," table with an ",(0,o.kt)("inlineCode",{parentName:"p"},"author_id")," property that matches the author's ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),". SQL databases tend to have a single node and follow the principles of ACID closely."),(0,o.kt)("p",null,"On the other hand, NoSQL databases are non-relational. They have no schema and don't use a declarative query language. This is why they are essentially called \"no SQL\" - they really are the opposite in many ways. Not having a schema frees up a NoSQL database to have flexibility in storing data. Here's an example: Let's say that we have one hundred friends. Most have one address - or at most two - but we have one itinerant friend that likes to travel. That friend has twelve addresses, one for each month of the year."),(0,o.kt)("p",null,"In a NoSQL database, most of the rows could have one or two columns for addresses while our traveling friend could have twelve. We don't have that flexibility in SQL - if we want to input twelve addresses, each in a different column, then all of the records in that table will need to have twelve addresses. There are some great benefits to that flexibility. We don't need to model our data ahead of time or know exactly what it looks like (such as with a schema). We can store many different types of data with many different types of fields."),(0,o.kt)("p",null,"One big downside of NoSQL databases is that they aren't great for complex queries. Looking back at the example of an author and their books, let's say we often wanted to find target demographics for books. For instance, we might want to find all the readers that are women between the ages of 40 and 49 for all of a specific author's books. That's a pretty complex query - and not one that NoSQL is built to deal with. SQL, on the other hand, is built to deal with these relationships. "),(0,o.kt)("p",null,"This is the biggest challenge for students coming from using SQL. They often want to know how to establish relationships between different records in a database. We will cover some basic ways to do this, but this simply isn't a strength of NoSQL."),(0,o.kt)("p",null,"Also, because NoSQL doesn't have its own structured query language, we'll find ourselves using the syntax of Firebase to make queries. This syntax looks a lot like JavaScript. Using Firebase syntax has upsides and downsides. On the one hand, Firebase exposes a lot of methods that give us additional functionality - making our lives easier as developers. On the other, learning this functionality - and incorporating it into our applications - is very specific to Firebase. We can't apply it to other cloud-based database services like AWS. That is why we won't delve too deeply into the particulars of Firebase. While it is helpful to learn the basics, the knowledge we'll gain is fairly narrow in scope. Fortunately, the documentation for Firebase is extensive if you want to do a deeper exploration on your own."))}p.isMDXComponent=!0}}]);