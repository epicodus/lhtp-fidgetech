"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[89389],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},99857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7896),r=(n(2784),n(30876));const i={title:"\ud83d\udcd3 4.4.0.3 Introduction to Redux Middleware",id:"4403-introduction-to-redux-middleware",slug:"4403-introduction-to-redux-middleware",hide_table_of_contents:!0,sidebar_position:3,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0c_introduction_to_redux_middleware.md"},o=void 0,s={unversionedId:"fidgetech-4-react/react-with-apis/4403-introduction-to-redux-middleware",id:"fidgetech-4-react/react-with-apis/4403-introduction-to-redux-middleware",title:"\ud83d\udcd3 4.4.0.3 Introduction to Redux Middleware",description:"In the last lesson, we made an API call to the New York Times and used local state to store information from the API's response. While this is a perfectly good approach, there are many situations where it's preferable to use a state management library like Redux.",source:"@site/docs/fidgetech-4-react/react-with-apis/0c-introduction-to-redux-middleware.md",sourceDirName:"fidgetech-4-react/react-with-apis",slug:"/fidgetech-4-react/react-with-apis/4403-introduction-to-redux-middleware",permalink:"/fidgetech-4-react/react-with-apis/4403-introduction-to-redux-middleware",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\ud83d\udcd3 4.4.0.3 Introduction to Redux Middleware",id:"4403-introduction-to-redux-middleware",slug:"4403-introduction-to-redux-middleware",hide_table_of_contents:!0,sidebar_position:3,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0c_introduction_to_redux_middleware.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.4.0.2 Making an API Call with fetch()",permalink:"/fidgetech-4-react/react-with-apis/4402-making-an-api-call-with-fetch"},next:{title:"\ud83d\udcd3 4.4.0.4 Building an API Application with React and Redux",permalink:"/fidgetech-4-react/react-with-apis/4404-building-an-api-application-with-react-and-redux"}},l={},d=[],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the last lesson, we made an API call to the New York Times and used local state to store information from the API's response. While this is a perfectly good approach, there are many situations where it's preferable to use a state management library like Redux."),(0,r.kt)("p",null,"However, we can't simply implement Redux to get this functionality in place. Redux actions are synchronous while API calls are asynchronous. In order to manage this issue, we need to use Redux ",(0,r.kt)("strong",{parentName:"p"},"middleware"),". Specifically, we'll use a middleware library called Redux-Thunk."),(0,r.kt)("p",null,"Before we do that, though, we're going to discuss the concept of middleware in greater depth."),(0,r.kt)("p",null,"What is middleware exactly? There's no exact definition in computer programming and it can mean many different things. It's often referred to as the \"glue\" that allows different applications or components to communicate."),(0,r.kt)("p",null,"In our case, we can think of middleware as something that we're going to stick in the middle of our reducer actions. This actually ties into the idea of a ",(0,r.kt)("strong",{parentName:"p"},"thunk"),", which, as you might guess, is what the Redux-Thunk library is named for."),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"thunk")," is just a subroutine that gets inserted into another subroutine. In other words, if some code is running, we push the pause button on that code, run some other code or calculation, and then resume the code we paused. The code that gets inserted during that pause is the ",(0,r.kt)("strong",{parentName:"p"},"thunk"),"."),(0,r.kt)("p",null,"So why do we need middleware and thunks with Redux, anyway? Well, Redux isn't a very complex library. There are a lot of things it can't do. To give it more functionality, we can pause our Redux actions, insert thunks that do other things (like handle asynchronous code), and then resume our Redux actions."),(0,r.kt)("p",null,"Here's an analogy. A group of carpenters fixing up a house realize there's an electrical issue they can't handle. They pause their work while an electrician comes in and takes care of the wiring. Then the carpenters go back to fixing up the house."),(0,r.kt)("p",null,"We can think of the carpenters as working on a subroutine (fixing up the house) that needs to be paused. They are the Redux actions. The electrician is the middleware executing a thunk (fixing the wiring) while the first subroutine is paused. When the thunk is complete, the carpenters' subroutine continues."),(0,r.kt)("p",null,"In the case of asynchronous code, that's something that Redux can't handle. It can only perform synchronous code. That doesn't always mesh nicely with the world of JavaScript, where asynchronous code is common. We need to use middleware to pause our synchronous Redux action, use our middleware to perform an asynchronous thunk, and then resume the Redux action."),(0,r.kt)("p",null,"Handling async code is a common use case for Redux middleware. However, we also need to use middleware any time we might have other side effects. For example, if we wanted to log certain actions, we'd use middleware for that, too, because the process of logging data (for example, to the console or to a server file) is a side effect."),(0,r.kt)("p",null,"Redux middleware follows a very specific structure and uses concepts we covered in Functional Programming with JavaScript - specifically, currying and composition."),(0,r.kt)("p",null,"Let's look at the structure of a Redux middleware function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const middlewareExample = store => next => action => {\n\n  // Here, we'd run some asynchronous code and/or code that has side effects, such as making an API call.\n\n  return next(action);\n}\n")),(0,r.kt)("p",null,"Redux middleware always follows this currying pattern. As we can see above, we have three curried functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first function provides access to the Redux store in your application."),(0,r.kt)("li",{parentName:"ul"},"The second provides access to a built-in Redux function called ",(0,r.kt)("inlineCode",{parentName:"li"},"next()")," that moves us to the next subroutine. This could be another middleware process or it could mean resuming the paused action itself."),(0,r.kt)("li",{parentName:"ul"},"The third provides access to the action that's currently being dispatched (and has been paused to run middleware).")),(0,r.kt)("p",null,"As we can see in the example above, ",(0,r.kt)("inlineCode",{parentName:"p"},"middlewareExample")," will return ",(0,r.kt)("inlineCode",{parentName:"p"},"next(action)"),". This is Redux resuming the dispatched action once it's ready to go."),(0,r.kt)("p",null,"It's important to note that even though we can create our own custom middleware outside of Redux, or use external middleware libraries, any middleware we use always relies on Redux's built-in functionality. That includes the middleware provided by the Redux Thunk library. In other words, Redux provides the basics along with the flexibility to use external middleware for use cases such as making API calls or code that creates other side effects."),(0,r.kt)("p",null,"So how could we actually incorporate a piece of middleware into a React application that uses Redux?"),(0,r.kt)("p",null,"We need to use Redux's ",(0,r.kt)("inlineCode",{parentName:"p"},"applyMiddleware()")," function when we instantiate our store. Let's take a look at how we might do this. Don't worry - we will do this again in the next lesson."),(0,r.kt)("div",{class:"filename"},"src/index.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"...\nimport { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers';\nimport middlewareExample from './middleware/middleware-example';\n\nconst store = createStore(reducer, applyMiddleware(middlewareExample));\n\n...\n")),(0,r.kt)("p",null,"In the example above, in addition to importing ",(0,r.kt)("inlineCode",{parentName:"p"},"createStore"),", we also import ",(0,r.kt)("inlineCode",{parentName:"p"},"applyMiddleware"),"."),(0,r.kt)("p",null,"We import a reducer and also import our middleware. As you can probably infer by the import statement for ",(0,r.kt)("inlineCode",{parentName:"p"},"middlewareExample"),", we'd store each custom middleware in a ",(0,r.kt)("inlineCode",{parentName:"p"},"middleware")," directory."),(0,r.kt)("p",null,"Finally, when we create our store, we pass in our reducer as the first argument and then ",(0,r.kt)("inlineCode",{parentName:"p"},"applyMiddleware()")," as the second argument. ",(0,r.kt)("inlineCode",{parentName:"p"},"applyMiddleware()")," itself takes our custom middleware as an argument."),(0,r.kt)("p",null,"At that point, Redux will take care of the rest. As long as any middleware we use follows the prescribed syntax (a ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," function that returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," function that returns an ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," function), our middleware will be applied to any action that needs it."),(0,r.kt)("p",null,"In the next lesson, we'll start rebuilding our React application to use Redux to handle state when making an API call."))}p.isMDXComponent=!0}}]);