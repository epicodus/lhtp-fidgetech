"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[33109],{30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),f=i,m=c["".concat(l,".").concat(f)]||c[f]||u[f]||a;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},45178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7896),i=(n(2784),n(30876));const a={title:"\ud83d\udcd3 4.3.0.6 Adding Firebase to React",id:"4306-adding-firebase-to-react",slug:"4306-adding-firebase-to-react",hide_table_of_contents:!0,sidebar_position:6,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0e_adding_firebase_to_react.md"},o=void 0,s={unversionedId:"fidgetech-4-react/react-with-nosql/4306-adding-firebase-to-react",id:"fidgetech-4-react/react-with-nosql/4306-adding-firebase-to-react",title:"\ud83d\udcd3 4.3.0.6 Adding Firebase to React",description:"We're ready to connect our help queue application to Firebase. Either clone down your existing copy of the help queue application or use this repo:",source:"@site/docs/fidgetech-4-react/react-with-nosql/0e-adding-firebase-to-react.md",sourceDirName:"fidgetech-4-react/react-with-nosql",slug:"/fidgetech-4-react/react-with-nosql/4306-adding-firebase-to-react",permalink:"/fidgetech-4-react/react-with-nosql/4306-adding-firebase-to-react",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"\ud83d\udcd3 4.3.0.6 Adding Firebase to React",id:"4306-adding-firebase-to-react",slug:"4306-adding-firebase-to-react",hide_table_of_contents:!0,sidebar_position:6,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0e_adding_firebase_to_react.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.3.0.5 Setting up a Firebase Project",permalink:"/fidgetech-4-react/react-with-nosql/4305-setting-up-a-firebase-project"},next:{title:"\ud83d\udcd3 4.3.0.7 Introduction to Hooks",permalink:"/fidgetech-4-react/react-with-nosql/4307-introduction-to-hooks"}},l={},p=[{value:"Step 1: Install Firebase",id:"step-1-install-firebase",level:3},{value:"Step 2: Add <code>.env</code> File",id:"step-2-add-env-file",level:3},{value:"Step 3: Create Configuration File with Firebase Reference",id:"step-3-create-configuration-file-with-firebase-reference",level:3},{value:"Step 4: Add and Configure Bindings",id:"step-4-add-and-configure-bindings",level:3},{value:"Step 5: Add Firestore Reducer",id:"step-5-add-firestore-reducer",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We're ready to connect our help queue application to Firebase. Either clone down your existing copy of the help queue application or use this repo:"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/epicodus-lessons/week-4-updated-react-nosql-starter-project"},(0,i.kt)("i",{class:"glyphicon glyphicon-folder-open"}),"  Example GitHub Repo for Help Queue"))),(0,i.kt)("h3",{id:"step-1-install-firebase"},"Step 1: Install Firebase"),(0,i.kt)("p",null,"First, we'll need to install Firebase in our project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install firebase@7.8.0\n")),(0,i.kt)("p",null,"Note that it's important to use the version pinned in this lesson. Because Firebase changes frequently, using a different version may mean different steps to setting up your application's configuration."),(0,i.kt)("h3",{id:"step-2-add-env-file"},"Step 2: Add ",(0,i.kt)("inlineCode",{parentName:"h3"},".env")," File"),(0,i.kt)("p",null,"Next, we need to add the key-value pairs from the ",(0,i.kt)("inlineCode",{parentName:"p"},"firebaseConfig")," object in our React application. However, we want to conceal this information using a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file. Otherwise, our Firebase database configuration will be exposed to everyone, including potentially malicious users."),(0,i.kt)("p",null,"Fortunately, ",(0,i.kt)("inlineCode",{parentName:"p"},"create-react-app")," automatically comes with ",(0,i.kt)("inlineCode",{parentName:"p"},"dotenv"),", the npm package we used in Intermediate JavaScript to store sensitive API keys in an ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,i.kt)("p",null,"First, we need to add ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," to our ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," file. Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"create-react-app")," automatically adds a number of these kinds of files to our ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," including ",(0,i.kt)("inlineCode",{parentName:"p"},".env.local"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".env.development.local"),", and so on. ",(0,i.kt)("inlineCode",{parentName:"p"},"create-react-app")," does this because in larger projects, it can be helpful to have multiple files for environment variables. They can be split up for testing, production, and development. For more information on different environment variable file types in ",(0,i.kt)("inlineCode",{parentName:"p"},"create-react-app"),", see ",(0,i.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/adding-custom-environment-variables/"},"Adding Custom Environment Variables"),"."),(0,i.kt)("p",null,"Since our application is small, we will just create a basic ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file. Add ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," and then commit and push the updated ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," file to Github. Don't create the ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file just yet. As you may recall from Intermediate JavaScript, if we push an updated ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," file at the same time as we push the file that should be ignored, Github won't know it's supposed to ignore it - meaning it will be added to the repo."),(0,i.kt)("p",null,"Next, create a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file in the root directory of the project. Environment variables can only be set up for strings, not objects. For that reason, each key-value pair in the ",(0,i.kt)("inlineCode",{parentName:"p"},"firebaseConfig")," object needs to be broken down into its own constant like this:"),(0,i.kt)("div",{class:"filename"},".env"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'REACT_APP_FIREBASE_API_KEY = "YOUR-UNIQUE-CREDENTIALS"\nREACT_APP_FIREBASE_AUTH_DOMAIN = "YOUR-PROJECT-NAME.firebaseapp.com"\nREACT_APP_FIREBASE_DATABASE_URL = "https://YOUR-PROJECT-NAME.firebaseio.com"\nREACT_APP_FIREBASE_PROJECT_ID = "YOUR-PROJECT-FIREBASE-PROJECT-ID"\nREACT_APP_FIREBASE_STORAGE_BUCKET = "YOUR-PROJECT-NAME.appspot.com"\nREACT_APP_FIREBASE_MESSAGING_SENDER_ID = "YOUR-PROJECT-SENDER-ID"\nREACT_APP_FIREBASE_APP_ID = "YOUR-PROJECT-APP-ID"\n')),(0,i.kt)("p",null,"Replace the placeholders in the values above with the value of each key from your own Firebase application. (If you've misplaced this info, click on the gear in the upper left of the page, click ",(0,i.kt)("inlineCode",{parentName:"p"},"project settings"),", and scroll to the bottom of the page.) "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," It is very important that every environment variable in your application is prefaced by ",(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP"),". Otherwise, the environment variable ",(0,i.kt)("strong",{parentName:"p"},"won't work"),". This is a safeguard put in place by ",(0,i.kt)("inlineCode",{parentName:"p"},"create-react-app")," to ensure that sensitive environment variables aren't accidentally exposed in our applications."),(0,i.kt)("h3",{id:"step-3-create-configuration-file-with-firebase-reference"},"Step 3: Create Configuration File with Firebase Reference"),(0,i.kt)("p",null,"Next, we'll create a file in our ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," directory called ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase.js"),". This is where we'll initialize Firebase in our application and create a database reference."),(0,i.kt)("p",null,"Add the following code to the file:"),(0,i.kt)("div",{class:"filename"},"src/firebase.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as firebase from 'firebase';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID \n}\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore();\n\nexport default firebase;\n")),(0,i.kt)("p",null,"We start by importing ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase/firestore"),". Next, we have the same configuration object that we copied from the Firebase UI. There are a few small tweaks: first, we save the configuration in a ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"firebaseConfig"),". (No more ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," for us!) Next, all the values are environment variables. We aren't exposing our sensitive data."),(0,i.kt)("p",null,"Next, we call the ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeApp")," method. This creates and initializes an instance of our Firebase application. We pass in our ",(0,i.kt)("inlineCode",{parentName:"p"},"firebaseConfig")," as an argument. That way, Firebase knows exactly which Firebase project should be accessed."),(0,i.kt)("p",null,"Then, because we are using Firestore as our database, we call ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase.firestore()"),". Finally, we ",(0,i.kt)("inlineCode",{parentName:"p"},"export default firebase")," to make our configuration available where it's needed."),(0,i.kt)("p",null,"At this point, we've successfully added Firebase and Firestore to our application. However, it's considerably more involved to actually start communicating with our database. We could do this without external libraries, but this is more challenging. Fortunately, there are several bindings (just as we used the React Redux bindings in the last course section) that we can use to make it easier to integrate React with Firebase and Firestore. We'll add those next."),(0,i.kt)("h3",{id:"step-4-add-and-configure-bindings"},"Step 4: Add and Configure Bindings"),(0,i.kt)("p",null,"We will add two external libraries for bindings. Make sure you use the versions indicated below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install react-redux-firebase@3.1.1 redux-firestore@0.12.0\n")),(0,i.kt)("p",null,"React Redux Firebase offers a higher-order component (HOC) so our React application has access to Firebase. It works somewhat similarly to React Redux, which also offers a HOC with the ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," function. We'll go over the similarities more as we add React Redux Firebase bindings to our application. If we were just using Firebase as our database, we wouldn't need to add any other bindings."),(0,i.kt)("p",null,"Because we are using Firestore as our database, though, we are also adding Redux Firestore to provide extra functionality. This library provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"firestoreReducer")," (while the Firebase library provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"firebaseReducer"),"). All of our communication with Firestore will go through our ",(0,i.kt)("inlineCode",{parentName:"p"},"firestoreReducer")," - this means we don't need to create additional reducers, use async actions, or use middleware like Redux-Thunk. (We haven't learned about async actions and middleware yet, but we will in future lessons.)"),(0,i.kt)("p",null,"Next, we need to update our entry point file."),(0,i.kt)("div",{class:"filename"},"src/index.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore';\nimport firebase from './firebase';\n\nconst store = createStore(rootReducer);\n\nconst rrfProps = {\n  firebase,\n  config: {\n        userProfile: \"users\"\n    },\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <App />\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n...\n")),(0,i.kt)("p",null,"We have three new import statements:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore';\nimport firebase from './firebase';\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ReactReduxFirebaseProvider")," is a component much like the ",(0,i.kt)("inlineCode",{parentName:"p"},"Provider")," component that Redux provides. We can wrap our root component in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactReduxFirebaseProvider")," component to make additional functionality available throughout our application, including the ",(0,i.kt)("inlineCode",{parentName:"p"},"withFirestore()")," function, which allows us to make Firestore available via a component's props."),(0,i.kt)("p",null,"We also need to import ",(0,i.kt)("inlineCode",{parentName:"p"},"createFirestoreInstance"),", which does exactly what it sounds like."),(0,i.kt)("p",null,"Finally, we import ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase.js")," config file we created earlier in this lesson. Remember these lines?"),(0,i.kt)("div",{class:"filename"},"src/firebase.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"firebase.initializeApp(firebaseConfig);\nfirebase.firestore();\n\nexport default firebase;\n")),(0,i.kt)("p",null,"We initialized Firebase with our unique Firebase config, set it up to use Firestore, and then exported it to make it available elsewhere in our application - specifically, our entry point file."),(0,i.kt)("p",null,"This gets passed into a new object we call ",(0,i.kt)("inlineCode",{parentName:"p"},"rrfProps")," (for ",(0,i.kt)("em",{parentName:"p"},"React Redux Firebase"),"):"),(0,i.kt)("div",{class:"filename"},"src/index.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const rrfProps = {\n  firebase,\n  config: {\n        userProfile: "users"\n    },\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}\n')),(0,i.kt)("p",null,"The React Redux Firebase bindings require these props to be passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"<ReactReduxFirebaseProvider>")," component. We can add different key-value pairs to ",(0,i.kt)("inlineCode",{parentName:"p"},"config"),". ",(0,i.kt)("inlineCode",{parentName:"p"},'userProfile: "users"')," simply states that any data on users will be stored in a collection called ",(0,i.kt)("inlineCode",{parentName:"p"},'"users"'),"."),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"App")," component is now wrapped in two different ",(0,i.kt)("inlineCode",{parentName:"p"},"Provider")," components:"),(0,i.kt)("div",{class:"filename"},"src/index.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\n<Provider store={store}>\n  <ReactReduxFirebaseProvider {...rrfProps}>\n    <App />\n  </ReactReduxFirebaseProvider>\n</Provider>\n...\n")),(0,i.kt)("p",null,"Both of these provide different ",(0,i.kt)("strong",{parentName:"p"},"context")," to the rest of our application. Redux's ",(0,i.kt)("inlineCode",{parentName:"p"},"Provider")," component provides our Redux store's context while ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactReduxFirebaseProvider")," provides Firebase and Firestore context. With both, we'll need to use higher order components in order to actually provide functionality from that context to components where it's needed."),(0,i.kt)("h3",{id:"step-5-add-firestore-reducer"},"Step 5: Add Firestore Reducer"),(0,i.kt)("p",null,"We have just one more configuration step. We'll add a ",(0,i.kt)("inlineCode",{parentName:"p"},"firestoreReducer")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"reducers/index.js")," file where our root reducer lives. This will take care of our communication with Firestore:"),(0,i.kt)("div",{class:"filename"},"src/reducers/index.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\n\nimport { firestoreReducer } from 'redux-firestore';\n\nconst rootReducer = combineReducers({\n  formVisibleOnPage: formVisibleReducer,\n  mainTicketList: ticketListReducer,\n  // new line of code below\n  firestore: firestoreReducer\n});\n\n...\n")),(0,i.kt)("p",null,"We import the ",(0,i.kt)("inlineCode",{parentName:"p"},"firestoreReducer")," from Redux Firestore and then we specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"firestoreReducer")," will handle the ",(0,i.kt)("inlineCode",{parentName:"p"},"firestore")," state slice. Remember that this root reducer gets imported into ",(0,i.kt)("inlineCode",{parentName:"p"},"src/index.js")," and is used when we first create and initialize our store. This means that the store we pass down into our application via provider components will now be able to use Firestore."),(0,i.kt)("p",null,"At this point, we've completed all necessary setup and configuration and we are ready to start communicating with our database. Over the next several lessons, we'll add full CRUD functionality to our help queue application - this time with Firestore providing the data!"))}u.isMDXComponent=!0}}]);