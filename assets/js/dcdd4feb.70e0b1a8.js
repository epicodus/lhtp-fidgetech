"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[12e3],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var i=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,k=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?i.createElement(k,a(a({ref:t},p),{},{components:n})):i.createElement(k,a({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},11730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(7896),r=(n(2784),n(30876));const o={title:"\ud83d\udcd3 4.3.0.11 Updating Tickets with Firestore",id:"43011-updating-tickets-with-firestore",slug:"43011-updating-tickets-with-firestore",hide_table_of_contents:!0,sidebar_position:11,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0i_updating_tickets_with_firestore.md"},a=void 0,s={unversionedId:"fidgetech-4-react/react-with-nosql/43011-updating-tickets-with-firestore",id:"fidgetech-4-react/react-with-nosql/43011-updating-tickets-with-firestore",title:"\ud83d\udcd3 4.3.0.11 Updating Tickets with Firestore",description:"Next, we're ready to get our edit and delete functionality working again. We will use a hook for our edit functionality while we will use the HOC we are already using in TicketControl.js for our delete functionality. This way, we will continue to get practice with using Firebase/Firestore bindings in both class and function components. It's important to note that both approaches are useful and depends on your use case. One is not better than the other - and the approach we take in rebuilding our help queue application isn't to figure out the perfect, most performant approach - but rather an opportunity to work with and practice both.",source:"@site/docs/fidgetech-4-react/react-with-nosql/0i-updating-tickets-with-firestore.md",sourceDirName:"fidgetech-4-react/react-with-nosql",slug:"/fidgetech-4-react/react-with-nosql/43011-updating-tickets-with-firestore",permalink:"/fidgetech-4-react/react-with-nosql/43011-updating-tickets-with-firestore",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"\ud83d\udcd3 4.3.0.11 Updating Tickets with Firestore",id:"43011-updating-tickets-with-firestore",slug:"43011-updating-tickets-with-firestore",hide_table_of_contents:!0,sidebar_position:11,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/fidgetech-4-react/blob/main/0i_updating_tickets_with_firestore.md"},sidebar:"fidgetech-4-react",previous:{title:"\ud83d\udcd3 4.3.0.10 Changing Selected Tickets",permalink:"/fidgetech-4-react/react-with-nosql/43010-changing-selected-tickets"},next:{title:"\ud83d\udcd3 4.3.0.12 Deleting Tickets with Firestore",permalink:"/fidgetech-4-react/react-with-nosql/43012-deleting-tickets-with-firestore"}},l={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Next, we're ready to get our edit and delete functionality working again. We will use a hook for our edit functionality while we will use the HOC we are already using in ",(0,r.kt)("inlineCode",{parentName:"p"},"TicketControl.js")," for our delete functionality. This way, we will continue to get practice with using Firebase/Firestore bindings in both class and function components. It's important to note that both approaches are useful and depends on your use case. One is not better than the other - and the approach we take in rebuilding our help queue application isn't to figure out the perfect, most performant approach - but rather an opportunity to work with and practice both."),(0,r.kt)("p",null,"To update tickets, we'll add the same ",(0,r.kt)("inlineCode",{parentName:"p"},"useFirestore")," hook that we used to create new tickets in ",(0,r.kt)("inlineCode",{parentName:"p"},"NewTicketForm.js"),"."),(0,r.kt)("p",null,"First, we need to import ",(0,r.kt)("inlineCode",{parentName:"p"},"useFirestore"),":"),(0,r.kt)("div",{class:"filename"},"src/components/EditTicketForm.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"...\nimport { useFirestore } from 'react-redux-firebase';\n")),(0,r.kt)("p",null,"Next, we need to actually call the ",(0,r.kt)("inlineCode",{parentName:"p"},"useFirestore()")," function and save our Firestore reference in a constant called ",(0,r.kt)("inlineCode",{parentName:"p"},"firestore"),":"),(0,r.kt)("div",{class:"filename"},"src/components/EditTicketForm.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"...\nfunction EditTicketForm(props){\n  const firestore = useFirestore();\n  ...\n}\n")),(0,r.kt)("p",null,"This should all be review so far. As shown in the example above, make sure that ",(0,r.kt)("inlineCode",{parentName:"p"},"useFirestore()")," is called in the component itself. If we are only going to use it in one function, we can also scope it locally to that function."),(0,r.kt)("p",null,"Next, here's our refactored ",(0,r.kt)("inlineCode",{parentName:"p"},"handleEditTicketFormSubmission()")," function:"),(0,r.kt)("div",{class:"filename"},"src/components/EditTicketForm.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"  function handleEditTicketFormSubmission(event) {\n    event.preventDefault();\n    props.onEditTicket();\n    const propertiesToUpdate = {\n      names: event.target.names.value,\n      location: event.target.location.value,\n      issue: event.target.issue.value\n    }\n    return firestore.update({collection: 'tickets', doc: ticket.id }, propertiesToUpdate)\n  }\n")),(0,r.kt)("p",null,"Instead of passing all the properties on to ",(0,r.kt)("inlineCode",{parentName:"p"},"TicketControl.js")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"props.onEditTicket()"),", we'll save those properties in a constant called ",(0,r.kt)("inlineCode",{parentName:"p"},"propertiesToUpdate"),". Our function will return:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"firestore.update({collection: 'tickets', doc: ticket.id }, propertiesToUpdate)\n")),(0,r.kt)("p",null,"Firestore exposes a handy ",(0,r.kt)("inlineCode",{parentName:"p"},"update()")," method which React Redux Firebase makes available to us via its bindings. We pass two arguments to this method:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The first argument is an object that describes the item that needs to be updated. The format should be familiar now; we specify the collection as well as the ticket's id.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The second argument is an object that contains the properties we want to update. We could just pass an object in directly but it's easier to read when we pass it into a constant first."))),(0,r.kt)("p",null,"Firestore will then merge the two objects together, with the properties from the second object taking precedent."),(0,r.kt)("p",null,"We still have the line ",(0,r.kt)("inlineCode",{parentName:"p"},"props.onEditTicket()"),". This method no longer has a parameter because we don't need to pass a ticket's properties up to ",(0,r.kt)("inlineCode",{parentName:"p"},"TicketControl.js")," any longer. However, we still need ",(0,r.kt)("inlineCode",{parentName:"p"},"TicketControl.js")," to change which component is rendering so we will keep ",(0,r.kt)("inlineCode",{parentName:"p"},"onTicketEdit()")," for that purpose."),(0,r.kt)("p",null,"Our application will now successfully update tickets in Firestore. However, we should also refactor the ",(0,r.kt)("inlineCode",{parentName:"p"},"handleEditingTicketInList()")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"TicketControl.js")," because it no longer needs to handle edited tickets. (A quick reminder: ",(0,r.kt)("inlineCode",{parentName:"p"},"handleEditingTicketInList()")," is passed down to ",(0,r.kt)("inlineCode",{parentName:"p"},"EditTicketForm.js")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"onEditTicket()"),".) Fortunately, it's a quick refactor:"),(0,r.kt)("div",{class:"filename"},"src/components/TicketControl.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"...\nhandleEditingTicketInList = () => {\n  this.setState({\n    editing: false,\n    selectedTicket: null\n  });\n}\n...\n")),(0,r.kt)("p",null,"At this point, the method only needs to set ",(0,r.kt)("inlineCode",{parentName:"p"},"editing")," to false and ",(0,r.kt)("inlineCode",{parentName:"p"},"selectedTicket")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",null,"Our refactor is almost complete - now we just need to add functionality so our application can delete Firestore tickets. We'll do that in the next lesson."))}u.isMDXComponent=!0}}]);